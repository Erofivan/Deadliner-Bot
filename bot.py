"""Main Deadliner Telegram Bot implementation."""
import logging
import re
from datetime import datetime, timedelta
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

from database import Database
from config import BOT_TOKEN, SECRET_CODE, REMINDER_INTERVALS
from scheduler import ReminderScheduler

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
ADD_DEADLINE, ADD_TITLE, ADD_DESCRIPTION, ADD_DATE, ADD_WEIGHT = range(5)

class DeadlinerBot:
    """Main bot class handling all functionality."""
    
    def __init__(self):
        self.db = Database()
        self.scheduler = ReminderScheduler(self.db)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler."""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name)
        
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã", callback_data="list_deadlines")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤", callback_data="export_deadlines")],
            [InlineKeyboardButton("üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="enter_code")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        welcome_text += "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        welcome_text += "üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã —Å –≤–µ—Å–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏\n"
        welcome_text += "üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
        welcome_text += "‚è∞ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        welcome_text += "üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        welcome_text += "üîë –î–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–æ–º —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Help command handler."""
        help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤
/code - –í–≤–µ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥

üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:*
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é

üìä *–í–µ—Å–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üî¥ urgent - –°—Ä–æ—á–Ω–æ (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω)
‚Ä¢ üü† important - –í–∞–∂–Ω–æ (–∫–∞–∂–¥—ã–π —á–∞—Å)  
‚Ä¢ üü° normal - –û–±—ã—á–Ω–æ (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞)
‚Ä¢ üü¢ low - –ù–µ—Å—Ä–æ—á–Ω–æ (–∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞)

üìÖ *–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã:*
‚Ä¢ 2024-12-31 15:30
‚Ä¢ 31.12.2024 15:30
‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30
‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 10:00

üîë *–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:*
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–µ–¥–ª–∞–π–Ω–æ–≤
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard button presses."""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        if query.data == "add_deadline":
            return await self.start_add_deadline(update, context)
        elif query.data == "list_deadlines":
            return await self.list_deadlines(update, context)
        elif query.data == "export_deadlines":
            return await self.export_deadlines(update, context)
        elif query.data == "enter_code":
            return await self.prompt_secret_code(update, context)
        elif query.data.startswith("complete_"):
            deadline_id = int(query.data.split("_")[1])
            return await self.complete_deadline(update, context, deadline_id)
        elif query.data.startswith("delete_"):
            deadline_id = int(query.data.split("_")[1])
            return await self.delete_deadline(update, context, deadline_id)
    
    async def start_add_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start conversation for adding deadline."""
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:"
            )
        else:
            await update.message.reply_text(
                "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:"
            )
        
        return ADD_TITLE
    
    async def add_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Get deadline title."""
        context.user_data['title'] = update.message.text
        
        await update.message.reply_text(
            "üìÑ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ "
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
        )
        
        return ADD_DESCRIPTION
    
    async def add_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Get deadline description."""
        if update.message.text == "/skip":
            context.user_data['description'] = ""
        else:
            context.user_data['description'] = update.message.text
        
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "‚Ä¢ 2024-12-31 15:30\n"
            "‚Ä¢ 31.12.2024 15:30\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30\n"
            "‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 10:00"
        )
        
        return ADD_DATE
    
    async def add_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Parse and validate deadline date."""
        date_text = update.message.text.strip().lower()
        
        try:
            deadline_date = self.parse_date(date_text)
            context.user_data['deadline_date'] = deadline_date
            
            keyboard = [
                [InlineKeyboardButton("üî¥ –°—Ä–æ—á–Ω–æ", callback_data="weight_urgent")],
                [InlineKeyboardButton("üü† –í–∞–∂–Ω–æ", callback_data="weight_important")],
                [InlineKeyboardButton("üü° –û–±—ã—á–Ω–æ", callback_data="weight_normal")],
                [InlineKeyboardButton("üü¢ –ù–µ—Å—Ä–æ—á–Ω–æ", callback_data="weight_low")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞:\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['title']}\n"
                f"üìÖ –î–∞—Ç–∞: {deadline_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–í–µ—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:",
                reply_markup=reply_markup
            )
            
            return ADD_WEIGHT
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: {e}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ 2024-12-31 15:30\n"
                "‚Ä¢ 31.12.2024 15:30\n"
                "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30"
            )
            return ADD_DATE
    
    async def add_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Save deadline with selected weight."""
        query = update.callback_query
        await query.answer()
        
        weight = query.data.split("_")[1]  # Extract weight from callback_data
        
        user_id = query.from_user.id
        title = context.user_data['title']
        description = context.user_data['description']
        deadline_date = context.user_data['deadline_date']
        
        # Save to database
        deadline_id = self.db.add_deadline(
            user_id, title, description, deadline_date, weight
        )
        
        # Clear conversation data
        context.user_data.clear()
        
        weight_emoji = {
            'urgent': 'üî¥',
            'important': 'üü†', 
            'normal': 'üü°',
            'low': 'üü¢'
        }
        
        success_text = (
            f"‚úÖ –î–µ–¥–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìù {title}\n"
            f"üìÖ {deadline_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä {weight_emoji[weight]} {weight.title()}\n"
            f"üÜî ID: {deadline_id}"
        )
        
        if description:
            success_text += f"\nüìÑ {description}"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã", callback_data="list_deadlines")],
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_deadline")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(success_text, reply_markup=reply_markup)
        
        return ConversationHandler.END
    
    def parse_date(self, date_text: str) -> datetime:
        """Parse various date formats."""
        now = datetime.now()
        
        # Handle relative dates
        if "–∑–∞–≤—Ç—Ä–∞" in date_text:
            base_date = now + timedelta(days=1)
            time_part = date_text.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in date_text:
            base_date = now + timedelta(days=2)
            time_part = date_text.replace("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "").strip()
        else:
            time_part = date_text
            base_date = None
        
        # Parse time
        time_match = re.search(r'(\d{1,2})[:.]\s*(\d{2})', time_part)
        if time_match:
            hour = int(time_match.group(1))
            minute = int(time_match.group(2))
            
            # Validate time
            if hour > 23:
                hour = 23
            if minute > 59:
                minute = 59
        else:
            hour, minute = 12, 0  # Default time
        
        if base_date:
            # For relative dates, use the base date with parsed time
            return base_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        # Parse absolute dates
        date_patterns = [
            r'(\d{4})-(\d{1,2})-(\d{1,2})',  # YYYY-MM-DD
            r'(\d{1,2})\.(\d{1,2})\.(\d{4})',  # DD.MM.YYYY
            r'(\d{1,2})/(\d{1,2})/(\d{4})',   # DD/MM/YYYY
        ]
        
        for pattern in date_patterns:
            match = re.search(pattern, date_text)
            if match:
                if pattern.startswith(r'(\d{4})'):  # YYYY-MM-DD
                    year, month, day = map(int, match.groups())
                else:  # DD.MM.YYYY or DD/MM/YYYY
                    day, month, year = map(int, match.groups())
                
                try:
                    return datetime(year, month, day, hour, minute)
                except ValueError:
                    continue
        
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    
    async def list_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """List user's deadlines."""
        user_id = update.effective_user.id
        deadlines = self.db.get_user_deadlines(user_id)
        
        if not deadlines:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
            keyboard = [[InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")]]
        else:
            text = "üìã *–í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã:*\n\n"
            
            weight_emoji = {'urgent': 'üî¥', 'important': 'üü†', 'normal': 'üü°', 'low': 'üü¢'}
            
            for i, dl in enumerate(deadlines, 1):
                days_left = (dl['deadline_date'] - datetime.now()).days
                hours_left = (dl['deadline_date'] - datetime.now()).seconds // 3600
                
                time_left = ""
                if days_left > 0:
                    time_left = f"({days_left}–¥.)"
                elif days_left == 0:
                    time_left = f"(—Å–µ–≥–æ–¥–Ω—è, {hours_left}—á.)"
                else:
                    time_left = "(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                
                text += f"{i}. {weight_emoji[dl['weight']]} *{dl['title']}* {time_left}\n"
                text += f"   üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
                if dl['description']:
                    text += f"   üìÑ {dl['description']}\n"
                text += f"   üÜî ID: {dl['id']}\n\n"
            
            # Create inline keyboard for actions
            keyboard = []
            for dl in deadlines[:5]:  # Show buttons for first 5 deadlines
                keyboard.append([
                    InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å {dl['id']}", callback_data=f"complete_{dl['id']}"),
                    InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {dl['id']}", callback_data=f"delete_{dl['id']}")
                ])
            
            keyboard.append([InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def complete_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Mark deadline as completed."""
        user_id = update.effective_user.id
        
        if self.db.complete_deadline(deadline_id, user_id):
            await update.callback_query.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!")
            await self.list_deadlines(update, context)
        else:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
    
    async def delete_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Delete deadline."""
        user_id = update.effective_user.id
        
        if self.db.delete_deadline(deadline_id, user_id):
            await update.callback_query.answer("üóë –î–µ–¥–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω!")
            await self.list_deadlines(update, context)
        else:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
    
    async def export_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Export deadlines in shareable format."""
        user_id = update.effective_user.id
        deadlines = self.db.get_user_deadlines(user_id)
        
        if not deadlines:
            text = "üì§ –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
        else:
            text = "üì§ *–≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤:*\n\n"
            text += "```\n"
            text += "üóì –°–ü–ò–°–û–ö –î–ï–î–õ–ê–ô–ù–û–í\n"
            text += "=" * 25 + "\n\n"
            
            weight_names = {'urgent': '–°–†–û–ß–ù–û', 'important': '–í–ê–ñ–ù–û', 'normal': '–û–ë–´–ß–ù–û', 'low': '–ù–ï–°–†–û–ß–ù–û'}
            
            for i, dl in enumerate(deadlines, 1):
                text += f"{i}. {dl['title']}\n"
                text += f"   üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
                text += f"   üìä {weight_names[dl['weight']]}\n"
                if dl['description']:
                    text += f"   üìÑ {dl['description']}\n"
                text += "\n"
            
            text += "=" * 25 + "\n"
            text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º @DeadlinerBot\n"
            text += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            text += "```\n\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        
        keyboard = [[InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_deadlines")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def prompt_secret_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Prompt user to enter secret code."""
        text = "üîë –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–µ–¥–ª–∞–π–Ω–æ–≤:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        
        context.user_data['awaiting_code'] = True
    
    async def check_secret_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Check if entered code matches secret code."""
        if context.user_data.get('awaiting_code'):
            entered_code = update.message.text.strip()
            
            if entered_code == SECRET_CODE:
                user_id = update.effective_user.id
                self.db.grant_access(user_id)
                
                await update.message.reply_text(
                    "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            
            context.user_data['awaiting_code'] = False
    
    async def handle_group_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle messages in groups."""
        chat = update.effective_chat
        
        if chat.type in ['group', 'supergroup']:
            # Add group to database
            self.db.add_group(chat.id, chat.title)
            
            # Check if bot was mentioned or command was used
            if update.message.text and ('/deadlines' in update.message.text or '@' in update.message.text):
                deadlines = self.db.get_all_active_deadlines()
                
                if deadlines:
                    text = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:*\n\n"
                    
                    weight_emoji = {'urgent': 'üî¥', 'important': 'üü†', 'normal': 'üü°', 'low': 'üü¢'}
                    
                    for dl in deadlines[:10]:  # Show max 10 deadlines
                        days_left = (dl['deadline_date'] - datetime.now()).days
                        time_left = f"({days_left}–¥.)" if days_left > 0 else "(—Å–µ–≥–æ–¥–Ω—è)"
                        
                        text += f"{weight_emoji[dl['weight']]} *{dl['title']}* {time_left}\n"
                        text += f"üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n\n"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                else:
                    await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel current conversation."""
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END


def main():
    """Start the bot."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables!")
        return
    
    bot = DeadlinerBot()
    
    # Build application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add conversation handler for adding deadlines
    add_deadline_conv = ConversationHandler(
        entry_points=[
            CommandHandler('add', bot.start_add_deadline),
            CallbackQueryHandler(bot.start_add_deadline, pattern="^add_deadline$")
        ],
        states={
            ADD_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.add_title)],
            ADD_DESCRIPTION: [MessageHandler(filters.TEXT, bot.add_description)],
            ADD_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.add_date)],
            ADD_WEIGHT: [CallbackQueryHandler(bot.add_weight, pattern="^weight_")]
        },
        fallbacks=[CommandHandler('cancel', bot.cancel)]
    )
    
    # Add handlers
    application.add_handler(CommandHandler('start', bot.start))
    application.add_handler(CommandHandler('help', bot.help_command))
    application.add_handler(CommandHandler('list', bot.list_deadlines))
    application.add_handler(CommandHandler('export', bot.export_deadlines))
    application.add_handler(CommandHandler('code', bot.prompt_secret_code))
    application.add_handler(add_deadline_conv)
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(MessageHandler(filters.TEXT, bot.check_secret_code), group=1)
    application.add_handler(MessageHandler(filters.ALL, bot.handle_group_message), group=2)
    
    # Start scheduler
    bot.scheduler.start(application.bot)
    
    logger.info("Bot started successfully!")
    application.run_polling()


if __name__ == '__main__':
    main()