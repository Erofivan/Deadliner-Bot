"""Main Deadliner Telegram Bot implementation."""
import logging
import re
from datetime import datetime, timedelta
from typing import Dict, Any

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

from database import Database
from config import BOT_TOKEN, SECRET_CODE, REMINDER_INTERVALS
from scheduler import ReminderScheduler
from importance_calculator import (
    calculate_importance_score, sort_deadlines_by_importance, 
    get_importance_description, get_weight_emoji
)

# Setup logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Conversation states
(ADD_DEADLINE, ADD_TITLE, ADD_DESCRIPTION, ADD_DATE, ADD_WEIGHT, 
 EDIT_DEADLINE, NOTIFICATION_SETTINGS, SET_NOTIFICATION_TIME, 
 VIEW_COMPLETED, DEADLINE_DETAIL) = range(10)

class DeadlinerBot:
    """Main bot class handling all functionality."""
    
    def __init__(self):
        self.db = Database()
        self.scheduler = ReminderScheduler(self.db)
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start command handler."""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name)
        
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã", callback_data="list_deadlines")],
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="notification_settings")],
            [InlineKeyboardButton("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="advanced_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        welcome_text += "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞–º–∏. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        welcome_text += "üìù –°–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã —Å –≤–µ—Å–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏\n"
        welcome_text += "üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤\n"
        welcome_text += "‚è∞ –ü—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        welcome_text += "üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        welcome_text += "üîë –î–µ–ª–∏—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–æ–º —á–µ—Ä–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def advanced_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show advanced options menu."""
        keyboard = [
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤", callback_data="export_deadlines")],
            [InlineKeyboardButton("üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞", callback_data="enter_code")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "‚öôÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n\n"
        text += "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ - –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n"
        text += "üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Help command handler."""
        help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω
/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–µ–¥–ª–∞–π–Ω–æ–≤
/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤
/code - –í–≤–µ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥

üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:*
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é

üìä *–í–µ—Å–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ 10 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ (—ç–∫–∑–∞–º–µ–Ω—ã, –¥–µ–¥–ª–∞–π–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤)
‚Ä¢ 7-9 - –û—á–µ–Ω—å –≤–∞–∂–Ω–æ (—Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏)  
‚Ä¢ 4-6 - –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å (–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ, –¥–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞)
‚Ä¢ 1-3 - –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å (—Ö–æ–±–±–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏)
‚Ä¢ 0 - –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å (–∏–¥–µ–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)

üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –∏ –¥–Ω–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π

üìÖ *–§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã:*
‚Ä¢ 2024-12-31 15:30
‚Ä¢ 31.12.2024 15:30
‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30
‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 10:00

üîë *–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥:*
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–µ–¥–ª–∞–π–Ω–æ–≤
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard button presses."""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        
        # Main menu actions
        if query.data == "main_menu":
            return await self.start(update, context)
        elif query.data == "add_deadline":
            return await self.start_add_deadline(update, context)
        elif query.data == "list_deadlines":
            return await self.list_deadlines(update, context)
        elif query.data == "advanced_menu":
            return await self.advanced_menu(update, context)
        elif query.data == "export_deadlines":
            return await self.export_deadlines(update, context)
        elif query.data == "enter_code":
            return await self.prompt_secret_code(update, context)
        elif query.data == "completed_deadlines":
            return await self.completed_deadlines(update, context)
        elif query.data == "notification_settings":
            return await self.notification_settings(update, context)
        
        # Sorting actions
        elif query.data.startswith("sort_"):
            sort_by = query.data.split("_", 1)[1]
            return await self.list_deadlines(update, context, sort_by=sort_by)
        
        # Editing actions
        elif query.data == "edit_deadlines":
            return await self.edit_deadlines(update, context)
        elif query.data == "edit_completed_deadlines":
            return await self.edit_completed_deadlines(update, context)
        elif query.data.startswith("detail_"):
            deadline_id = int(query.data.split("_")[1])
            context.user_data['last_view'] = 'detail'
            return await self.deadline_detail(update, context, deadline_id)
        
        # Deadline actions
        elif query.data.startswith("complete_"):
            deadline_id = int(query.data.split("_")[1])
            return await self.complete_deadline(update, context, deadline_id)
        elif query.data.startswith("delete_"):
            deadline_id = int(query.data.split("_")[1])
            return await self.delete_deadline(update, context, deadline_id)
        elif query.data.startswith("reopen_"):
            deadline_id = int(query.data.split("_")[1])
            return await self.reopen_deadline(update, context, deadline_id)

        
        # Notification settings actions
        elif query.data == "set_notification_times":
            return await self.set_notification_times(update, context)
        elif query.data == "set_notification_days":
            return await self.set_notification_days(update, context)
        elif query.data.startswith("toggle_day_"):
            day = int(query.data.split("_")[2])
            return await self.toggle_notification_day(update, context, day)
        elif query.data == "save_notification_days":
            return await self.save_notification_days_confirm(update, context)
    
    async def start_add_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start conversation for adding deadline."""
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:"
            )
        else:
            await update.message.reply_text(
                "üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞:"
            )
        
        return ADD_TITLE
    
    async def add_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Get deadline title."""
        context.user_data['title'] = update.message.text
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÑ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞ "
            "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=reply_markup
        )
        
        return ADD_DESCRIPTION
    
    async def add_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Get deadline description."""
        if update.message.text == "/skip":
            context.user_data['description'] = ""
        else:
            context.user_data['description'] = update.message.text
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–µ–¥–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
            "‚Ä¢ 2024-12-31 15:30\n"
            "‚Ä¢ 31.12.2024 15:30\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30\n"
            "‚Ä¢ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ 10:00",
            reply_markup=reply_markup
        )
        
        return ADD_DATE
    
    async def add_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Parse and validate deadline date."""
        date_text = update.message.text.strip().lower()
        
        try:
            deadline_date = self.parse_date(date_text)
            context.user_data['deadline_date'] = deadline_date
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üìä –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –¥–µ–¥–ª–∞–π–Ω–∞ (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10):\n\n"
                f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {context.user_data['title']}\n"
                f"üìÖ –î–∞—Ç–∞: {deadline_date.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üî¥ 10 - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ\n"
                f"üü† 7-9 - –û—á–µ–Ω—å –≤–∞–∂–Ω–æ\n"
                f"üü° 4-6 - –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å\n"
                f"üîµ 1-3 - –ù–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å\n"
                f"‚ö™ 0 - –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:",
                reply_markup=reply_markup
            )
            
            return ADD_WEIGHT
            
        except ValueError as e:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: {e}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "‚Ä¢ 2024-12-31 15:30\n"
                "‚Ä¢ 31.12.2024 15:30\n"
                "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30",
                reply_markup=reply_markup
            )
            return ADD_DATE
    
    async def add_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle weight input and save deadline."""
        try:
            weight_text = update.message.text.strip()
            weight = int(weight_text)
            
            if weight < 0 or weight > 10:
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=reply_markup
                )
                return ADD_WEIGHT
            
            user_id = update.effective_user.id
            title = context.user_data['title']
            description = context.user_data['description']
            deadline_date = context.user_data['deadline_date']
            
            # Save to database
            deadline_id = self.db.add_deadline(
                user_id, title, description, deadline_date, weight
            )
            
            # Clear conversation data
            context.user_data.clear()
            
            weight_emoji = get_weight_emoji(weight)
            importance_desc = get_importance_description(weight, deadline_date)
            
            success_text = (
                f"‚úÖ –î–µ–¥–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìù {title}\n"
                f"üìÖ {deadline_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä {weight_emoji} –í–∞–∂–Ω–æ—Å—Ç—å: {weight}/10\n"
                f"üéØ {importance_desc}\n"
                f"üÜî ID: {deadline_id}"
            )
            
            if description:
                success_text += f"\nüìÑ {description}"
            
            keyboard = [
                [InlineKeyboardButton("üìã –ú–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã", callback_data="list_deadlines")],
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_deadline")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(success_text, reply_markup=reply_markup)
            
            return ConversationHandler.END
            
        except ValueError:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:",
                reply_markup=reply_markup
            )
            return ADD_WEIGHT
    
    def parse_date(self, date_text: str) -> datetime:
        """Parse various date formats."""
        now = datetime.now()
        
        # Handle relative dates
        if "–∑–∞–≤—Ç—Ä–∞" in date_text:
            base_date = now + timedelta(days=1)
            time_part = date_text.replace("–∑–∞–≤—Ç—Ä–∞", "").strip()
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in date_text:
            base_date = now + timedelta(days=2)
            time_part = date_text.replace("–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", "").strip()
        else:
            time_part = date_text
            base_date = None
        
        # Parse time
        time_match = re.search(r'(\d{1,2})[:.]\s*(\d{2})', time_part)
        if time_match:
            hour = int(time_match.group(1))
            minute = int(time_match.group(2))
            
            # Validate time
            if hour > 23:
                hour = 23
            if minute > 59:
                minute = 59
        else:
            hour, minute = 12, 0  # Default time
        
        if base_date:
            # For relative dates, use the base date with parsed time
            return base_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        # Parse absolute dates
        date_patterns = [
            r'(\d{4})-(\d{1,2})-(\d{1,2})',  # YYYY-MM-DD
            r'(\d{1,2})\.(\d{1,2})\.(\d{4})',  # DD.MM.YYYY
            r'(\d{1,2})/(\d{1,2})/(\d{4})',   # DD/MM/YYYY
        ]
        
        for pattern in date_patterns:
            match = re.search(pattern, date_text)
            if match:
                if pattern.startswith(r'(\d{4})'):  # YYYY-MM-DD
                    year, month, day = map(int, match.groups())
                else:  # DD.MM.YYYY or DD/MM/YYYY
                    day, month, year = map(int, match.groups())
                
                try:
                    return datetime(year, month, day, hour, minute)
                except ValueError:
                    continue
        
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    
    async def list_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE, sort_by: str = 'importance'):
        """List user's deadlines with new interface."""
        user_id = update.effective_user.id
        deadlines = self.db.get_user_deadlines(user_id)
        
        if not deadlines:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            # Sort deadlines based on selected criteria
            if sort_by == 'importance':
                deadlines = sort_deadlines_by_importance(deadlines)
            elif sort_by == 'date':
                deadlines = sorted(deadlines, key=lambda d: d['deadline_date'])
            elif sort_by == 'time_remaining':
                deadlines = sorted(deadlines, key=lambda d: abs((d['deadline_date'] - datetime.now()).total_seconds()))
            elif sort_by == 'weight':
                deadlines = sorted(deadlines, key=lambda d: d['weight'], reverse=True)
            
            text = "üìã *–í–∞—à–∏ –¥–µ–¥–ª–∞–π–Ω—ã:*\n\n"
            
            for i, dl in enumerate(deadlines, 1):
                time_delta = dl['deadline_date'] - datetime.now()
                days_left = time_delta.days
                hours_left = int(time_delta.total_seconds() // 3600)
                
                # Format time remaining
                if days_left > 1:
                    time_left = f"({days_left} –¥–Ω.)"
                elif days_left == 1:
                    time_left = "(–∑–∞–≤—Ç—Ä–∞)"
                elif days_left == 0 and hours_left > 0:
                    time_left = f"(—á–µ—Ä–µ–∑ {hours_left} —á.)"
                elif days_left == 0 and hours_left >= 0:
                    time_left = "(—Å–µ–≥–æ–¥–Ω—è)"
                else:
                    # Overdue - make it bold
                    overdue_hours = abs(hours_left)
                    if overdue_hours < 24:
                        time_left = f"**(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {overdue_hours} —á.)**"
                    else:
                        overdue_days = abs(days_left)
                        time_left = f"**(–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {overdue_days} –¥–Ω.)**"
                
                weight_emoji = get_weight_emoji(dl['weight'])
                
                # Make overdue tasks bold
                if days_left < 0 or (days_left == 0 and hours_left < 0):
                    text += f"{i}. {weight_emoji} **{dl['title']}** {time_left}\n"
                else:
                    text += f"{i}. {weight_emoji} *{dl['title']}* {time_left}\n"
                
                text += f"   üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
                text += f"   üìä –í–∞–∂–Ω–æ—Å—Ç—å: {dl['weight']}/10\n"
                if dl['description']:
                    text += f"   üìÑ {dl['description'][:50]}{'...' if len(dl['description']) > 50 else ''}\n"
                text += "\n"
            
            # Create buttons for sorting and editing
            sort_buttons = [
                InlineKeyboardButton("üìä –ü–æ –≤–∞–∂–Ω–æ—Å—Ç–∏" + (" ‚úì" if sort_by == 'importance' else ""), 
                                   callback_data="sort_importance"),
                InlineKeyboardButton("üìÖ –ü–æ –¥–∞—Ç–µ" + (" ‚úì" if sort_by == 'date' else ""), 
                                   callback_data="sort_date")
            ]
            
            keyboard = [
                sort_buttons,
                [
                    InlineKeyboardButton("‚è∞ –ü–æ –≤—Ä–µ–º–µ–Ω–∏" + (" ‚úì" if sort_by == 'time_remaining' else ""), 
                                       callback_data="sort_time_remaining"),
                    InlineKeyboardButton("üè∑ –ü–æ –≤–µ—Å—É" + (" ‚úì" if sort_by == 'weight' else ""), 
                                       callback_data="sort_weight")
                ],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_deadlines")],
                [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completed_deadlines")],
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def edit_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show deadlines for editing."""
        user_id = update.effective_user.id
        deadlines = self.db.get_user_deadlines(user_id)
        
        if not deadlines:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω", callback_data="add_deadline")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
        else:
            text = "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\n\n"
            
            keyboard = []
            for dl in deadlines:
                weight_emoji = get_weight_emoji(dl['weight'])
                button_text = f"{weight_emoji} {dl['title']}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"detail_{dl['id']}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_deadlines")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def deadline_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Show detailed view of a deadline."""
        user_id = update.effective_user.id
        
        # Get deadline from database
        deadlines = self.db.get_user_deadlines(user_id)
        deadline = next((d for d in deadlines if d['id'] == deadline_id), None)
        
        if not deadline:
            await update.callback_query.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await self.edit_deadlines(update, context)
        
        time_delta = deadline['deadline_date'] - datetime.now()
        days_left = time_delta.days
        hours_left = int(time_delta.total_seconds() // 3600)
        
        # Format time remaining
        if days_left > 1:
            time_left = f"{days_left} –¥–Ω."
        elif days_left == 1:
            time_left = "–∑–∞–≤—Ç—Ä–∞"
        elif days_left == 0 and hours_left > 0:
            time_left = f"—á–µ—Ä–µ–∑ {hours_left} —á."
        elif days_left == 0 and hours_left >= 0:
            time_left = "—Å–µ–≥–æ–¥–Ω—è"
        else:
            overdue_hours = abs(hours_left)
            if overdue_hours < 24:
                time_left = f"**–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {overdue_hours} —á.**"
            else:
                overdue_days = abs(days_left)
                time_left = f"**–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {overdue_days} –¥–Ω.**"
        
        weight_emoji = get_weight_emoji(deadline['weight'])
        importance_desc = get_importance_description(deadline['weight'], deadline['deadline_date'])
        
        text = f"üìã *–î–µ—Ç–∞–ª–∏ –¥–µ–¥–ª–∞–π–Ω–∞:*\n\n"
        text += f"üìù **{deadline['title']}**\n"
        text += f"üìÖ {deadline['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
        text += f"‚è∞ {time_left}\n"
        text += f"üìä {weight_emoji} –í–∞–∂–Ω–æ—Å—Ç—å: {deadline['weight']}/10\n"
        text += f"üéØ {importance_desc}\n"
        
        if deadline['description']:
            text += f"üìÑ {deadline['description']}\n"
        
        text += f"üÜî ID: {deadline['id']}"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{deadline_id}"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{deadline_id}")
            ],
            [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{deadline_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="edit_deadlines")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def completed_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show completed deadlines."""
        user_id = update.effective_user.id
        completed = self.db.get_completed_deadlines(user_id)
        
        if not completed:
            text = "‚úÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤."
        else:
            text = "‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:*\n\n"
            
            for i, dl in enumerate(completed, 1):
                weight_emoji = get_weight_emoji(dl['weight'])
                text += f"{i}. {weight_emoji} ~~{dl['title']}~~\n"
                text += f"   üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
                text += f"   üìä –í–∞–∂–Ω–æ—Å—Ç—å: {dl['weight']}/10\n"
                if dl['description']:
                    text += f"   üìÑ {dl['description'][:50]}{'...' if len(dl['description']) > 50 else ''}\n"
                text += "\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_completed_deadlines")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def edit_completed_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show completed deadlines for editing (reopening)."""
        user_id = update.effective_user.id
        completed = self.db.get_completed_deadlines(user_id)
        
        if not completed:
            text = "‚úÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤."
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="completed_deadlines")]]
        else:
            text = "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:*\n\n"
            
            keyboard = []
            for dl in completed:
                weight_emoji = get_weight_emoji(dl['weight'])
                button_text = f"{weight_emoji} {dl['title']}"
                if len(button_text) > 30:
                    button_text = button_text[:27] + "..."
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f"reopen_{dl['id']}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="completed_deadlines")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def reopen_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Reopen a completed deadline."""
        user_id = update.effective_user.id
        
        if self.db.reopen_deadline(deadline_id, user_id):
            await update.callback_query.answer("üîÑ –î–µ–¥–ª–∞–π–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            await self.edit_completed_deadlines(update, context)
        else:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
    
    async def notification_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show notification settings."""
        user_id = update.effective_user.id
        settings = self.db.get_user_notification_settings(user_id)
        
        times_str = ", ".join(settings['times']) if settings['times'] else "–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        
        # Convert day numbers to day names
        day_names = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°']
        active_days = [day_names[day] for day in settings['days'] if 0 <= day <= 6]
        days_str = ", ".join(active_days) if active_days else "–Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        
        text = f"üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {times_str}\n"
        text += f"üìÖ –î–Ω–∏: {days_str}\n\n"
        text += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–≥–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞—Ö."
        
        keyboard = [
            [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", callback_data="set_notification_times")],
            [InlineKeyboardButton("üìÖ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–Ω–∏", callback_data="set_notification_days")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def set_notification_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Prompt user to set notification times."""
        text = ("‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, "
                "—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
                "‚Ä¢ 10:00\n"
                "‚Ä¢ 10:00, 20:00\n"
                "‚Ä¢ 09:30, 14:00, 21:00\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notification_settings")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        return SET_NOTIFICATION_TIME
    
    async def save_notification_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Save notification times from user input."""
        try:
            user_id = update.effective_user.id
            times_text = update.message.text.strip()
            
            # Parse times
            time_strings = [t.strip() for t in times_text.split(',')]
            valid_times = []
            
            for time_str in time_strings:
                # Validate time format
                if ':' not in time_str:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")
                
                parts = time_str.split(':')
                if len(parts) != 2:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}")
                
                hour, minute = int(parts[0]), int(parts[1])
                if hour < 0 or hour > 23 or minute < 0 or minute > 59:
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_str}")
                
                formatted_time = f"{hour:02d}:{minute:02d}"
                valid_times.append(formatted_time)
            
            if not valid_times:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            
            # Get current settings and update times
            settings = self.db.get_user_notification_settings(user_id)
            self.db.update_user_notification_settings(user_id, valid_times, settings['days'])
            
            await update.message.reply_text(
                f"‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {', '.join(valid_times)}\n\n"
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
            )
            
            # Return to notification settings
            context.user_data.clear()
            await self.notification_settings(update, context)
            
            return ConversationHandler.END
            
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10:00, 20:30)"
            )
            return SET_NOTIFICATION_TIME
        except Exception as e:
            logger.error(f"Error saving notification times: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
            return ConversationHandler.END
    
    async def set_notification_days(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show day selection interface."""
        user_id = update.effective_user.id
        settings = self.db.get_user_notification_settings(user_id)
        
        day_names = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°']
        selected_days = settings['days']
        
        text = "üìÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏:\n\n"
        
        keyboard = []
        for i, day_name in enumerate(day_names):
            is_selected = i in selected_days
            button_text = f"‚úÖ {day_name}" if is_selected else f"‚óªÔ∏è {day_name}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"toggle_day_{i}")])
        
        keyboard.append([
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_notification_days"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="notification_settings")
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def toggle_notification_day(self, update: Update, context: ContextTypes.DEFAULT_TYPE, day: int):
        """Toggle a day in notification settings."""
        user_id = update.effective_user.id
        settings = self.db.get_user_notification_settings(user_id)
        
        if day in settings['days']:
            settings['days'].remove(day)
        else:
            settings['days'].append(day)
        
        # Save updated settings
        self.db.update_user_notification_settings(user_id, settings['times'], settings['days'])
        
        # Update interface
        await self.set_notification_days(update, context)
    
    async def save_notification_days_confirm(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Confirm saving notification days."""
        user_id = update.effective_user.id
        settings = self.db.get_user_notification_settings(user_id)
        
        day_names = ['–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë', '–í–°']
        selected_day_names = [day_names[day] for day in settings['days']]
        
        await update.callback_query.answer(
            f"‚úÖ –î–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(selected_day_names)}"
        )
        await self.notification_settings(update, context)
    
    async def start_edit_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start conversation for editing deadline weight."""
        query = update.callback_query
        if not query.data.startswith("edit_"):
            return ConversationHandler.END
            
        deadline_id = int(query.data.split("_")[1])
        return await self.edit_deadline_weight(update, context, deadline_id)
    
    async def edit_deadline_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Start editing a deadline's weight."""
        user_id = update.effective_user.id
        
        # Get deadline from database
        deadlines = self.db.get_user_deadlines(user_id)
        deadline = next((d for d in deadlines if d['id'] == deadline_id), None)
        
        if not deadline:
            await update.callback_query.answer("‚ùå –î–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return await self.edit_deadlines(update, context)
        
        context.user_data['edit_deadline_id'] = deadline_id
        
        weight_emoji = get_weight_emoji(deadline['weight'])
        
        text = (f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞*\n\n"
                f"üìù **{deadline['title']}**\n"
                f"üìÖ {deadline['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
                f"üìä –¢–µ–∫—É—â–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å: {weight_emoji} {deadline['weight']}/10\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–∂–Ω–æ—Å—Ç—å (—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10):")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"detail_{deadline_id}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        return EDIT_DEADLINE
    
    async def save_deadline_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Save the edited deadline weight."""
        try:
            weight_text = update.message.text.strip()
            weight = int(weight_text)
            
            if weight < 0 or weight > 10:
                deadline_id = context.user_data.get('edit_deadline_id')
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"detail_{deadline_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 10. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    reply_markup=reply_markup
                )
                return EDIT_DEADLINE
            
            user_id = update.effective_user.id
            deadline_id = context.user_data.get('edit_deadline_id')
            
            if not deadline_id:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return ConversationHandler.END
            
            # Update deadline weight
            success = self.db.update_deadline(deadline_id, user_id, weight=weight)
            
            if success:
                weight_emoji = get_weight_emoji(weight)
                keyboard = [[InlineKeyboardButton("üìã –ö –¥–µ—Ç–∞–ª—è–º", callback_data=f"detail_{deadline_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    f"‚úÖ –í–∞–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {weight_emoji} {weight}/10",
                    reply_markup=reply_markup
                )
                
                # Clear conversation data
                context.user_data.clear()
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å")
                context.user_data.clear()
            
            return ConversationHandler.END
            
        except ValueError:
            deadline_id = context.user_data.get('edit_deadline_id')
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"detail_{deadline_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10:",
                reply_markup=reply_markup
            )
            return EDIT_DEADLINE

    async def edit_deadline_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle back button during deadline editing."""
        query = update.callback_query
        if query.data.startswith("detail_"):
            deadline_id = int(query.data.split("_")[1])
            context.user_data.clear()  # Clear conversation data
            return await self.deadline_detail(update, context, deadline_id)
        return ConversationHandler.END

    async def add_deadline_back(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle back button during add deadline conversation."""
        context.user_data.clear()  # Clear conversation data
        await self.start(update, context)
        return ConversationHandler.END

    async def complete_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Mark deadline as completed."""
        user_id = update.effective_user.id
        
        if self.db.complete_deadline(deadline_id, user_id):
            await update.callback_query.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!")
            # Return to edit view if coming from detail view, otherwise to list
            callback_data = update.callback_query.data
            if 'detail' in context.user_data.get('last_view', ''):
                await self.edit_deadlines(update, context)
            else:
                await self.list_deadlines(update, context)
        else:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
    
    async def delete_deadline(self, update: Update, context: ContextTypes.DEFAULT_TYPE, deadline_id: int):
        """Delete deadline."""
        user_id = update.effective_user.id
        
        if self.db.delete_deadline(deadline_id, user_id):
            await update.callback_query.answer("üóë –î–µ–¥–ª–∞–π–Ω —É–¥–∞–ª–µ–Ω!")
            await self.list_deadlines(update, context)
        else:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
    
    async def export_deadlines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Export deadlines in shareable format."""
        user_id = update.effective_user.id
        deadlines = self.db.get_user_deadlines(user_id)
        
        if not deadlines:
            text = "üì§ –£ –≤–∞—Å –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞."
        else:
            # Sort by importance for export
            deadlines = sort_deadlines_by_importance(deadlines)
            
            text = "üì§ *–≠–∫—Å–ø–æ—Ä—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤:*\n\n"
            text += "```\n"
            text += "üóì –°–ü–ò–°–û–ö –î–ï–î–õ–ê–ô–ù–û–í\n"
            text += "=" * 25 + "\n\n"
            
            for i, dl in enumerate(deadlines, 1):
                weight_emoji = get_weight_emoji(dl['weight'])
                importance_desc = get_importance_description(dl['weight'], dl['deadline_date'])
                
                text += f"{i}. {dl['title']}\n"
                text += f"   üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n"
                text += f"   üìä {weight_emoji} –í–∞–∂–Ω–æ—Å—Ç—å: {dl['weight']}/10\n"
                text += f"   üéØ {importance_desc.replace('üî• ', '').replace('üö® ', '').replace('‚ö° ', '').replace('‚è∞ ', '').replace('üìù ', '').replace('üîµ ', '')}\n"
                if dl['description']:
                    text += f"   üìÑ {dl['description']}\n"
                text += "\n"
            
            text += "=" * 25 + "\n"
            text += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º @DeadlinerBot\n"
            text += f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            text += "```\n\n"
            text += "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="list_deadlines")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def prompt_secret_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Prompt user to enter secret code."""
        text = "üîë –í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–µ–¥–ª–∞–π–Ω–æ–≤:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text)
        else:
            await update.message.reply_text(text)
        
        context.user_data['awaiting_code'] = True
    
    async def check_secret_code(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Check if entered code matches secret code."""
        if context.user_data.get('awaiting_code'):
            entered_code = update.message.text.strip()
            
            if entered_code == SECRET_CODE:
                user_id = update.effective_user.id
                self.db.grant_access(user_id)
                
                await update.message.reply_text(
                    "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã."
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            
            context.user_data['awaiting_code'] = False
    
    async def handle_group_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle messages in groups."""
        chat = update.effective_chat
        
        if chat.type in ['group', 'supergroup']:
            # Add group to database
            self.db.add_group(chat.id, chat.title)
            
            # Check if bot was mentioned or command was used
            if update.message.text and ('/deadlines' in update.message.text or '@' in update.message.text):
                deadlines = self.db.get_all_active_deadlines()
                
                if deadlines:
                    text = "üìã *–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã:*\n\n"
                    
                    weight_emoji = {'urgent': 'üî¥', 'important': 'üü†', 'normal': 'üü°', 'low': 'üü¢'}
                    
                    for dl in deadlines[:10]:  # Show max 10 deadlines
                        days_left = (dl['deadline_date'] - datetime.now()).days
                        time_left = f"({days_left}–¥.)" if days_left > 0 else "(—Å–µ–≥–æ–¥–Ω—è)"
                        
                        text += f"{weight_emoji[dl['weight']]} *{dl['title']}* {time_left}\n"
                        text += f"üìÖ {dl['deadline_date'].strftime('%d.%m.%Y %H:%M')}\n\n"
                    
                    await update.message.reply_text(text, parse_mode='Markdown')
                else:
                    await update.message.reply_text("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤.")
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel current conversation."""
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END


def main():
    """Start the bot."""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN not found in environment variables!")
        return
    
    bot = DeadlinerBot()
    
    # Build application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add conversation handler for adding deadlines
    add_deadline_conv = ConversationHandler(
        entry_points=[
            CommandHandler('add', bot.start_add_deadline),
            CallbackQueryHandler(bot.start_add_deadline, pattern="^add_deadline$")
        ],
        states={
            ADD_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.add_title)],
            ADD_DESCRIPTION: [
                MessageHandler(filters.TEXT, bot.add_description),
                CallbackQueryHandler(bot.add_deadline_back, pattern="^main_menu$")
            ],
            ADD_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.add_date),
                CallbackQueryHandler(bot.add_deadline_back, pattern="^main_menu$")
            ],
            ADD_WEIGHT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.add_weight),
                CallbackQueryHandler(bot.add_deadline_back, pattern="^main_menu$")
            ]
        },
        fallbacks=[CommandHandler('cancel', bot.cancel)]
    )
    
    # Add conversation handler for notification times
    notification_time_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(bot.set_notification_times, pattern="^set_notification_times$")
        ],
        states={
            SET_NOTIFICATION_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, bot.save_notification_times)]
        },
        fallbacks=[CommandHandler('cancel', bot.cancel)]
    )
    
    # Add conversation handler for deadline editing
    edit_deadline_conv = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(bot.start_edit_deadline, pattern="^edit_")
        ],
        states={
            EDIT_DEADLINE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bot.save_deadline_weight),
                CallbackQueryHandler(bot.edit_deadline_back, pattern="^detail_")
            ]
        },
        fallbacks=[CommandHandler('cancel', bot.cancel)]
    )
    
    # Add handlers
    application.add_handler(CommandHandler('start', bot.start))
    application.add_handler(CommandHandler('help', bot.help_command))
    application.add_handler(CommandHandler('list', bot.list_deadlines))
    application.add_handler(CommandHandler('export', bot.export_deadlines))
    application.add_handler(CommandHandler('code', bot.prompt_secret_code))
    application.add_handler(add_deadline_conv)
    application.add_handler(notification_time_conv)
    application.add_handler(edit_deadline_conv)
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(MessageHandler(filters.TEXT, bot.check_secret_code), group=1)
    application.add_handler(MessageHandler(filters.ALL, bot.handle_group_message), group=2)
    
    # Start scheduler
    bot.scheduler.start(application.bot)
    
    logger.info("Bot started successfully!")
    application.run_polling()


if __name__ == '__main__':
    main()