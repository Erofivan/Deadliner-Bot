"""Importance calculation utilities for deadlines."""
import math
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from typing import List, Dict


def calculate_importance_score(weight: int, deadline_date: datetime) -> float:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —á–∞—Å–æ–≤–æ–π –º–Ω–æ–≥–æ—Ñ–∞–∑–Ω–æ–π —Ñ–æ—Ä–º—É–ª–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏.
    –§–æ—Ä–º—É–ª–∞ –∫—Ä–∞–π–Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∫ –∑–∞–¥–∞—á–∞–º, –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π.
    """
    now = datetime.now(ZoneInfo("Europe/Moscow"))
    if deadline_date.tzinfo is None:
        deadline_date = deadline_date.replace(tzinfo=ZoneInfo("Europe/Moscow"))

    time_delta = deadline_date - now
    hours_remaining = time_delta.total_seconds() / 3600

    if hours_remaining < 0:
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—É—á–∞—é—Ç –æ–≥—Ä–æ–º–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç + –±–æ–Ω—É—Å –æ—Ç –≤–µ—Å–∞
        return 100000 + int(weight)
    
    # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ —á–∞—Å–∞
    if hours_remaining == 0:
        hours_remaining = 0.001

    try:
        base_weight = int(weight)
    except (ValueError, TypeError):
        base_weight = 5

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–æ–Ω—ã (–≤ —á–∞—Å–∞—Ö)
    zone_coefficient = 5.0  # üîµ –ó–æ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (> 504 —á–∞—Å–æ–≤)

    if hours_remaining <= 72:
        # üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞ (<= 3 –¥–Ω–µ–π)
        zone_coefficient = 2000.0
    elif hours_remaining <= 504:
        # üü° –ó–æ–Ω–∞ –≤–Ω–∏–º–∞–Ω–∏—è (<= 21 –¥–Ω—è)
        zone_coefficient = 200.0
    
    # –§–æ—Ä–º—É–ª–∞: –í–µ—Å * (–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç / (–ß–∞—Å—ã + 1))
    total_score = base_weight * (zone_coefficient / (hours_remaining + 1))

    return round(total_score, 2)


def sort_deadlines_by_importance(deadlines: List[Dict]) -> List[Dict]:
    """
    Sort deadlines by calculated importance score.
    
    Args:
        deadlines: List of deadline dictionaries
        
    Returns:
        Sorted list of deadlines (most important first)
    """
    def get_importance(deadline):
        return calculate_importance_score(
            deadline['weight'], 
            deadline['deadline_date']
        )
    
    return sorted(deadlines, key=get_importance, reverse=True)


def get_importance_description(weight, deadline_date: datetime) -> str:
    """
    Get human-readable description of importance level.
    
    Args:
        weight: Importance weight from 0-10 (can be int or str)
        deadline_date: The deadline date
        
    Returns:
        Description string
    """
    score = calculate_importance_score(weight, deadline_date)
    
    if score >= 25:
        return "üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ"
    elif score >= 15:
        return "üö® –û—á–µ–Ω—å —Å—Ä–æ—á–Ω–æ"
    elif score >= 10:
        return "‚ö° –°—Ä–æ—á–Ω–æ"
    elif score >= 7:
        return "‚è∞ –í–∞–∂–Ω–æ"
    elif score >= 4:
        return "üìù –û–±—ã—á–Ω–æ"
    else:
        return "üîµ –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"


def get_weight_emoji(weight) -> str:
    """Get emoji representation for weight value."""
    try:
        weight_int = int(weight)
    except (ValueError, TypeError):
        weight_int = 5  # Default to medium if conversion fails
    
    if weight_int >= 9:
        return "üî¥"  # Critical
    elif weight_int >= 7:
        return "üü†"  # High
    elif weight_int >= 5:
        return "üü°"  # Medium
    elif weight_int >= 3:
        return "üîµ"  # Low
    else:
        return "‚ö™"  # Very low